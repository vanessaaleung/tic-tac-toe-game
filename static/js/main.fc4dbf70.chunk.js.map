{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","bgColor","color","textColor","value","Board","createBoard","board","i","boardRow","j","push","this","renderSquare","key","squares","React","Component","Game","handleName","event","name","target","setState","state","history","Array","fill","row","column","stepNumber","xIsNext","descending","nameX","nameO","slice","current","length","Math","floor","col","calculateWinner","concat","step","moves","status","names","sortBtn","newBtn","winner","handleSort","handleNew","map","move","desc","location","toString","class","jumpTo","type","onChange","handleClick","reverse","lines","filled","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc4dbf70.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// function component\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick} \n    \t\tstyle={{backgroundColor:props.bgColor, color:props.textColor}}>\n    {props.value}\n    </button>\n    \n    );\n\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square \n      key={i}\n      value={this.props.squares[i]}\n      onClick={() => this.props.onClick(i)}\n      bgColor={this.props.bgColor[i]}\n      textColor={this.props.textColor[i]}\n    />\n    ;\n  }\n\n  // Rewrite Board to use two loops to make the squares instead of hardcoding them\n  createBoard = function createBoard() {\n      let board = []\n\n      for (let i = 0; i < 3; i++) {\n        let boardRow = []\n        \n        for (let j = 3 * i; j < 3 * i + 3; j++) {\n          boardRow.push(this.renderSquare(j))\n        }\n\n        board.push(<div key={i}>{boardRow}</div>)\n      }\n      return board\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard()}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        bgColor: Array(9).fill(\"transparent\"),\n        textColor: Array(9).fill(\"black\"),\n        row: 0,\n        column: 0,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      descending: false,\n      nameX: '',\n      nameO: ''\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();  //slice(): create a copy\n    const bgColor = current.bgColor;\n    const textColor = current.textColor;\n    // Display the location for each move in the format (col, row)\n    const row = Math.floor(i / 3 + 1);\n    const col = Math.floor(i % 3 + 1);\n\n    if (calculateWinner(squares, bgColor) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    textColor[i] = this.state.xIsNext ? 'black' : '#ff7272';\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        bgColor: bgColor,\n        textColor: textColor,\n        row: row,\n        col: col,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      descending: false,\n      nameX: this.state.nameX,\n      nameO: this.state.nameO\n    });\n  }\n\n  // revert game to specific steps\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  // sort the moves\n  handleSort() {\n      this.setState(state => ({ \n        descending: !state.descending\n      }));\n  }\n\n  // start a new game\n  handleNew() {\n  \tthis.setState(state => ({\n\t\thistory: [{\n\t        squares: Array(9).fill(null),\n\t        bgColor: Array(9).fill(\"transparent\"),\n\t        textColor: Array(9).fill(\"black\"),\n\t        row: 0,\n\t        column: 0,\n\t      }],\n\t      stepNumber: 0,\n\t      xIsNext: true,\n\t      descending: false,\n\t      nameX: '',\n      \t  nameO: ''\n  \t}));\n  }\n\n  // custom player name\n  handleName = (event) => {\n  \tlet name = event.target.name;\n  \tlet value = event.target.value;\n    this.setState({[name]: value});\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const nameX = this.state.nameX;\n    const nameO = this.state.nameO;\n    const winner = calculateWinner(current.squares, current.bgColor);\n\n    let moves;\n    let status;\n    let names;\n    let sortBtn;\n    let newBtn;\n\n    // only show after entering names\n    if (this.state.nameX && this.state.nameO){\n      // not showing names\n      // show btns\n      sortBtn = (\n        <button className=\"sortBtn\" onClick={() => this.handleSort()}>SORT MOVES</button>\n      );\n      newBtn = (\n        <button className=\"newBtn\" onClick={() => this.handleNew()}>NEW GAME</button>\n      );\n    \t// show moves\n    \tmoves = history.map((step, move) => {\n\t      const desc = move ? 'Go to move #' + move : 'Go to game start';\n\t      const location = move !== 0 ? \" (\" + [history[move].row , history[move].col].toString() + \")\" : null;\n\n\t      return (\n\t        <li key={move}>\n\t          {/* Bold the currently selected item in the move list */}\n\t          {move === this.state.stepNumber\n\t            ? <button class=\"moveBtn\" onClick={() => \n\t                {if(winner){} else{this.jumpTo(move)}}}>\n\t                <b>{desc}{location}</b>\n\t              </button> \n\t            : <button class=\"moveBtn\" onClick={() => \n\t                {if(winner){} else{this.jumpTo(move)}}}>\n\t              {desc}{location}\n\t              </button> \n\t          } \n\t        </li>\n\t      );\n\t    });\n    \t// show status\n    \tif (winner && winner !== \"Draw\") {\n\t      status = 'Winner: ' + (winner === \"X\" ? nameX : nameO);\n\t    } \n\t    else if (winner === \"Draw\"){\n\t      status = \"Draw\"\n\t    }\n\t    else{\n\t      status = 'Next player: ' + (this.state.xIsNext ? nameX : nameO);\n\t    }\n    }\n    else {\n    \tmoves= '';\n    \tstatus = '';\n      sortBtn = '';\n      newBtn = '';\n      names = (\n        <div>\n          Player 1 <input type=\"text\" name='nameX' onChange={this.handleName}/>\n          <br></br>\n          Player 2 <input type=\"text\" name='nameO' onChange={this.handleName}/>\n        </div>\n      );\n    }\n    \n\n    return (\n      <div className=\"game\">\n        <div className=\"game-name\">\n          <h1>Tic-Tac-Toe</h1>\n        </div>\n        <div className=\"game-content\">\n          <div className=\"game-board\">\n            <Board \n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n              bgColor={current.bgColor}\n              textColor={current.textColor}\n                />\n          </div>\n          <div className=\"game-info\">\n            {names}\n          \t<div>{status}</div>\n            {/* Add a toggle button that lets you sort the moves in either ascending or descending order. */}\n            <div className=\"btn\">\n              {sortBtn}\n              {newBtn}\n            \t{/* <button className=\"sortBtn\" \n            \t\t\tonClick={() => this.handleSort()}>SORT MOVES</button>\n            \t<button className=\"newBtn\" onClick={() => this.handleNew()}>NEW GAME</button> */}\n            </div>\n            \n            <ol>{this.state.descending ? moves.reverse() : moves}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares, bgColor) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  let filled = 0;\n\n  for (let i = 0; i < lines.length; i++){\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      bgColor[a] = bgColor[b] = bgColor[c] = \"#ffd31d\";\n      return squares[a];\n    }\n    else if (squares[a] && squares[b] && squares[c]) {\n      filled += 1;\n    }\n    else{}\n  }\n\n  // When no one wins, display a message about the result being a draw.\n  if (filled === 8){\n    return \"Draw\";\n  }\n  else{\n    return null;\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}